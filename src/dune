(library
 (name mebi_plugin) ; This is the name you will use in
                    ; Coq's `Declare ML Module`, and
                    ; the name of the main OCaml
                    ; module of your plugin.
 (public_name coq-mebi.mebi) ; This makes the plugin
                             ; installable; recommended, must
                             ; match opam package name.
 (synopsis "MEBI Plugin (src)") ; Synopsis, used in META generation.
 (flags :standard -rectypes -w -27) ; Coq requires the `-rectypes`
                                    ; flag; CoqPP generated code
                                    ; requires to disable warning 27
                                    ; often.
                                    ; (foreign_stubs                     ; we link our plugin with a C
                                    ;  (language c)                      ; library! Optional, of course.
                                    ;  (names ce_get))
 (libraries ; OCaml Libraries we want to link
            ; with, your choice here.
            ; coq-core.vernac                  ; Needed for vernac extend.
  coq-core.plugins.ltac ; Needed for tactic extend.
  )
 (modules
  utils
  rocq_utils
  rocq_convert
  logging
  mebi_enc
  mebi_setup
  strfy
  mebi_constr
  mebi_theories
  model
  lts
  fsm
  algorithms
  mebi_tactics
  mebi_wrapper
  mebi_ind
  mebi_utils
  mebi_bisim
  params
  ; dump_to_file
  mebi_help
  command
  ; examples
  g_mebi))

(coq.pp ; This will let Dune know about Coq's .mlg grammar files.
 (modules g_mebi))

; (library
;  (name mebi_fsm)
;  (public_name coq-mebi.mebi_fsm)
;  (modules utils fsm bisimilarity))

; (executable
;  (name tests)
;  (modules tests)
;  (libraries mebi_plugin mebi_fsm))

; (test
;  (name tests))

; (rule (target))
