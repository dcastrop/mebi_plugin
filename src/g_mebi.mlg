DECLARE PLUGIN "coq-mebi.mebi"

{
(* If we forget this line and include our own tactic definition using
  TACTIC EXTEND, as below, then we get the strange error message
  no implementation available for Tacentries, only when compiling
  theories/Loader.v *)
(* open Ltac_plugin *)

open Stdarg
(* open Pp *)
}

(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto0/src/g_tuto0.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto1/src/g_tuto1.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto2/src/g_tuto2.mlg *)

(* https://github.com/rocq-prover/rocq/blob/master/dev/doc/parsing.md *)

(*

  # Syntax of MeBi commands

  {C} ::= MeBi                            : syntax of commands {C}
          [ Check | Show |                : feedback/output mode
            Dump  | Dump <name> ]   
          [ {L} | {F} | {A} ]             : kind of command to run
                                              {L} => build LTS
                                              {F} => build FSM
                                              {A} => run algorithm
          Using <lts_list>                : list of lts/constructors (outermost-first)

  {L} ::= LTS                             : syntax of LTS model (term + lts)
          [ Is Bounded <num> |            : (optional) raise error if bound exceeded
            Bounded <num>    |            : (optional) upper-bound
          Of <term>                       : initial term
          [ Weak <tau> Of <constr> |  ]   : (optional) check weak bisimilarity, using constructor for silent transitions

  {F} ::= FSM From {L}                    : build ocaml FSM from extracted LTS

  {A} ::= [ {B} | {M} | {G} ]             : kinds of algorithms to run
                                              {G} => Merge
                                              {B} => Bisimilarity
                                              {M} => Minimization

  {G} ::= Merge {L}                       : run merge algorithm, first initial term
          With <lts>                      : the primary lts layer of first lts
          And {L}                         : initial term of second lts
          With <lts>                      : primary lts layer for second lts

  {B} ::= Bisim {L}                       : run bisimilarity algorithm, first initial term
          With <lts>                      : the primary lts layer of first lts
          And {L}                         : initial term of second lts
          With <lts>                      : primary lts layer for second lts

  {M} ::= Minim {L}                       : run minimization algorithm

  ---------------------------------------

  # Examples

  - [MeBi Show LTS Of p Using a b c.]
    Builds an lts of term [p] using coq-lts [a], [b] and [c]
    (using a default bound), and displays in feedback window.

  - [MeBi Check n LTS Of p Using a.]
    Does the same as the above, but nothing is printed, displayed or outputted.

  - [MeBi Show LTS Bounded 5 Of p Using a b c.]
    Builds an lts of term [p] using coq-lts [a], [b] and [c]
    until 5 states are reached, and displays in feedback window.

  - [MeBi Check n LTS Is Bounded 5 Of p Using a.]
    Does the same as the above, but nothing is printed, displayed or outputted,
    and if the lts is not complete within the bounds, then raises failure.

  - [MeBi Dump LTS Of p Using a b c.]
    Builds an lts of term [p] using coq-lts [a], [b] and [c]
    and then dumps to (json) file.

  - [MeBi Dump n LTS Of p Using a b c.]
    Builds an lts of term [p] using coq-lts [a], [b] and [c]
    and then dumps to (json) file with name [n].

  ## Running Algorithms

  - [MeBi Show Merge LTS Of n With a And LTS Is Bounded 5 Of m With b Using a b c.]
    Builds the lts of initial term [n] using [a] as the primary lts, and does 
    the same for [m] using [b]. (Both can utilise any of the other provided lts
    as other layers.) Then, converts both to fsm and then merges them.

  *)

VERNAC COMMAND EXTEND MeBiLTS CLASSIFIED AS QUERY

(******************************)
(** Build LTS from coq term ***)
(******************************)

| ["MeBi" "Check" constr(x) ] -> {Mebi_wrapper.run (Mebi_api.check x)}

| ["MeBi" "Run" constr(x) ] -> {Mebi_wrapper.run (Mebi_api.run x)}

(* | [ "MeBi" string(mode) string(model) "Of" constr(t) "Using" reference_list(r) ] -> 
  { match (
      match mode with 
        | "Check" -> Some (Vernac.Check ())
        | "Show" -> Some (Vernac.Show ())
        | "Dump" -> Some (Vernac.Dump None)
        | _ -> None
    ) with 
    | None -> Feedback.msg_notice (str "unrecognized mode: " ++ str mode)
    | Some mode -> (
      match model with 
        | "LTS" -> Vernac.LTS (((true, Command.default_bound, t), ), r)
        | _ -> None
    )


    Mebi_wrapper.run (Mebi_api.run x)
  } *)


(* LTS -- no silent actions *)
| [ "MeBi" "Check" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((false, Command.default_bound, t), None), None), r))}

| [ "MeBi" "Check" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((false, i, t), None), None), r))}

| [ "MeBi" "Check" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((true, i, t), None), None), r))}

| [ "MeBi" "Show" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((false, Command.default_bound, t), None), None), r))}

| [ "MeBi" "Show" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((false, i, t), None), None), r))}

| [ "MeBi" "Show" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((true, i, t), None), None), r))}

| [ "MeBi" "Dump" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((false, Command.default_bound, t), None), None), r))}

| [ "MeBi" "Dump" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((false, i, t), None), None), r))}

| [ "MeBi" "Dump" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((true, i, t), None), None), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((false, Command.default_bound, t), None), None), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((false, i, t), None), None), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((true, i, t), None), None), r))}

(* LTS -- with silent actions *)
| [ "MeBi" "Check" "LTS" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((false, Command.default_bound, t), Some (a, w)), None), r))}

| [ "MeBi" "Check" "LTS" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((false, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Check" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((true, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Show" "LTS" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((false, Command.default_bound, t), Some (a, w)), None), r))}

| [ "MeBi" "Show" "LTS" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((false, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Show" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((true, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" "LTS" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((false, Command.default_bound, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" "LTS" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((false, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((true, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((false, Command.default_bound, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((false, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((true, i, t), Some (a, w)), None), r))}

(* LTS -- no silent actions -- explicit lts *)
| [ "MeBi" "Check" "LTS" "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((false, Command.default_bound, t), None), Some l), r))}

| [ "MeBi" "Check" "LTS" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((false, i, t), None), Some l), r))}

| [ "MeBi" "Check" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((true, i, t), None), Some l), r))}

| [ "MeBi" "Show" "LTS" "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((false, Command.default_bound, t), None), Some l), r))}

| [ "MeBi" "Show" "LTS" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((false, i, t), None), Some l), r))}

| [ "MeBi" "Show" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((true, i, t), None), Some l), r))}

| [ "MeBi" "Dump" "LTS" "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((false, Command.default_bound, t), None), Some l), r))}

| [ "MeBi" "Dump" "LTS" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((false, i, t), None), Some l), r))}

| [ "MeBi" "Dump" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((true, i, t), None), Some l), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((false, Command.default_bound, t), None), Some l), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((false, i, t), None), Some l), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Is" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((true, i, t), None), Some l), r))}

(* LTS -- with silent actions -- explicit lts *)
| [ "MeBi" "Check" "LTS" "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((false, Command.default_bound, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Check" "LTS" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((false, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Check" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (((true, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Show" "LTS" "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((false, Command.default_bound, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Show" "LTS" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((false, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Show" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (((true, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" "LTS" "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((false, Command.default_bound, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" "LTS" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((false, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (((true, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((false, Command.default_bound, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((false, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Is" "Bounded" int(i) "Of" constr(t) "With" reference (l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (((true, i, t), Some (a, w)), Some l), r))}

(******************************)
(** Build FSM from coq term ***) (* same as the above but with [Vernac.FSM] *)
(******************************)

(* FSM -- no silent actions *)
| [ "MeBi" "Check" "FSM" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((false, Command.default_bound, t), None), None), r))}

| [ "MeBi" "Check" "FSM" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((false, i, t), None), None), r))}

| [ "MeBi" "Check" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((true, i, t), None), None), r))}

| [ "MeBi" "Show" "FSM" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((false, Command.default_bound, t), None), None), r))}

| [ "MeBi" "Show" "FSM" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((false, i, t), None), None), r))}

| [ "MeBi" "Show" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((true, i, t), None), None), r))}

| [ "MeBi" "Dump" "FSM" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((false, Command.default_bound, t), None), None), r))}

| [ "MeBi" "Dump" "FSM" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((false, i, t), None), None), r))}

| [ "MeBi" "Dump" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((true, i, t), None), None), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((false, Command.default_bound, t), None), None), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((false, i, t), None), None), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((true, i, t), None), None), r))}

(* FSM -- with silent actions *)
| [ "MeBi" "Check" "FSM" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((false, Command.default_bound, t), Some (a, w)), None), r))}

| [ "MeBi" "Check" "FSM" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((false, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Check" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((true, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Show" "FSM" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((false, Command.default_bound, t), Some (a, w)), None), r))}

| [ "MeBi" "Show" "FSM" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((false, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Show" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((true, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" "FSM" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((false, Command.default_bound, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" "FSM" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((false, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((true, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((false, Command.default_bound, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((false, i, t), Some (a, w)), None), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((true, i, t), Some (a, w)), None), r))}

(* FSM -- no silent actions -- explicit lts *)
| [ "MeBi" "Check" "FSM" "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((false, Command.default_bound, t), None), Some l), r))}

| [ "MeBi" "Check" "FSM" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((false, i, t), None), Some l), r))}

| [ "MeBi" "Check" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((true, i, t), None), Some l), r))}

| [ "MeBi" "Show" "FSM" "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((false, Command.default_bound, t), None), Some l), r))}

| [ "MeBi" "Show" "FSM" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((false, i, t), None), Some l), r))}

| [ "MeBi" "Show" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((true, i, t), None), Some l), r))}

| [ "MeBi" "Dump" "FSM" "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((false, Command.default_bound, t), None), Some l), r))}

| [ "MeBi" "Dump" "FSM" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((false, i, t), None), Some l), r))}

| [ "MeBi" "Dump" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((true, i, t), None), Some l), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((false, Command.default_bound, t), None), Some l), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((false, i, t), None), Some l), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Is" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((true, i, t), None), Some l), r))}

(* FSM -- with silent actions -- explicit lts *)
| [ "MeBi" "Check" "FSM" "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((false, Command.default_bound, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Check" "FSM" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((false, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Check" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (((true, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Show" "FSM" "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((false, Command.default_bound, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Show" "FSM" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((false, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Show" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (((true, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" "FSM" "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((false, Command.default_bound, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" "FSM" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((false, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (((true, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((false, Command.default_bound, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((false, i, t), Some (a, w)), Some l), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Is" "Bounded" int(i) "Of" constr(t) "With" reference(l) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (((true, i, t), Some (a, w)), Some l), r))}

(******************************)
(** Run Minim Algorithm on ****)
(** FSM built from LTS ********)
(******************************)
(* Minim -- no silent actions *)
| [ "MeBi" "Check" "Minim" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Minim ((false, Command.default_bound, t), None), r))}

| [ "MeBi" "Check" "Minim" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Minim ((false, i, t), None), r))}

| [ "MeBi" "Check" "Minim" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Minim ((true, i, t), None), r))}

| [ "MeBi" "Show" "Minim" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Minim ((false, Command.default_bound, t), None), r))}

| [ "MeBi" "Show" "Minim" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Minim ((false, i, t), None), r))}

| [ "MeBi" "Show" "Minim" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Minim ((true, i, t), None), r))}

| [ "MeBi" "Dump" "Minim" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Minim ((false, Command.default_bound, t), None), r))}

| [ "MeBi" "Dump" "Minim" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Minim ((false, i, t), None), r))}

| [ "MeBi" "Dump" "Minim" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Minim ((true, i, t), None), r))}

| [ "MeBi" "Dump" string(n) "Minim" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Minim ((false, Command.default_bound, t), None), r))}

| [ "MeBi" "Dump" string(n) "Minim" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Minim ((false, i, t), None), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Minim" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Minim ((true, i, t), None), r))}

(* Mimim -- with silent actions *)
| [ "MeBi" "Check" "Minim" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Minim ((false, Command.default_bound, t), Some (a, w)), r))}

| [ "MeBi" "Check" "Minim" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Minim ((false, i, t), Some (a, w)), r))}

| [ "MeBi" "Check" "Minim" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Minim ((true, i, t), Some (a, w)), r))}

| [ "MeBi" "Show" "Minim" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Minim ((false, Command.default_bound, t), Some (a, w)), r))}

| [ "MeBi" "Show" "Minim" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Minim ((false, i, t), Some (a, w)), r))}

| [ "MeBi" "Show" "Minim" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Minim ((true, i, t), Some (a, w)), r))}

| [ "MeBi" "Dump" "Minim" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Minim ((false, Command.default_bound, t), Some (a, w)), r))}

| [ "MeBi" "Dump" "Minim" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Minim ((false, i, t), Some (a, w)), r))}

| [ "MeBi" "Dump" "Minim" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Minim ((true, i, t), Some (a, w)), r))}

| [ "MeBi" "Dump" string(n) "Minim" "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Minim ((false, Command.default_bound, t), Some (a, w)), r))}

| [ "MeBi" "Dump" string(n) "Minim" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Minim ((false, i, t), Some (a, w)), r))}

| [ "MeBi" "Dump" string(n) "Minim" "Is" "Bounded" int(i) "Of" constr(t) "Weak" constr(a) "Of" reference(w) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Minim ((true, i, t), Some (a, w)), r))}

(******************************)
(** Run Merge Algorithm on ****)
(** two FSMs constructed from *)
(** different initial terms ***)
(** and lts. ******************)
(******************************)

(* strong -- check *)
| [ "MeBi" "Check" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((false, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((false, i1, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((true, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((true, i2, t2), None), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((true, i1, t1), None), l1), (((true, i2, t2), None), l2)), r))}

(* strong -- show *)
| [ "MeBi" "Show" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((false, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((false, i1, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((true, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((true, i2, t2), None), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((true, i1, t1), None), l1), (((true, i2, t2), None), l2)), r))}

(* strong -- dump -- unnamed *)
| [ "MeBi" "Dump" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((false, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((false, i1, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((true, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((true, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((true, i1, t1), None), l1), (((true, i2, t2), None), l2)), r))}

(* strong -- dump -- named *)
| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((false, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((false, i1, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((true, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((false, Command.default_bound, t1), None), l1), (((true, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((true, i1, t1), None), l1), (((true, i2, t2), None), l2)), r))}

(* weak -- check *)
| [ "MeBi" "Check" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((false, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((false, i1, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((true, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge ((((true, i1, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

(* weak -- show *)
| [ "MeBi" "Show" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((false, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((false, i1, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((true, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge ((((true, i1, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

(* weak -- dump -- unnamed *)
| [ "MeBi" "Dump" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((false, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((false, i1, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((true, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge ((((true, i1, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

(* weak -- dump -- named *)
| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((false, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((false, i1, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((true, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge ((((true, i1, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}


(******************************)
(** Run Bisim Algorithm on ****)
(** two FSMs constructed from *)
(** different initial terms ***)
(** and lts. ******************)
(******************************)

(* strong -- check *)
| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, i1, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((true, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((true, i2, t2), None), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((true, i1, t1), None), l1), (((true, i2, t2), None), l2)), r))}

(* strong -- show *)
| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, i1, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((true, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((true, i2, t2), None), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((true, i1, t1), None), l1), (((true, i2, t2), None), l2)), r))}

(* strong -- dump -- unnamed *)
| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, i1, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((true, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((true, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((true, i1, t1), None), l1), (((true, i2, t2), None), l2)), r))}

(* strong -- dump -- named *)
| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, i1, t1), None), l1), (((false, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((true, i1, t1), None), l1), (((false, Command.default_bound, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), None), l1), (((true, i2, t2), None), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((true, i1, t1), None), l1), (((true, i2, t2), None), l2)), r))}

(* weak -- check *)
| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, i1, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((true, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((true, i1, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

(* weak -- show *)
| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, i1, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((true, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((true, i1, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

(* weak -- dump -- unnamed *)
| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, i1, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((true, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((true, i1, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

(* weak -- dump -- named *)
| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, i1, t1), Some (a1, w1)), l1), (((false, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((true, i1, t1), Some (a1, w1)), l1), (((false, Command.default_bound, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" constr(a1) "Of" reference(w1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" constr(a2) "Of" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((true, i1, t1), Some (a1, w1)), l1), (((true, i2, t2), Some (a2, w2)), l2)), r))}


END
