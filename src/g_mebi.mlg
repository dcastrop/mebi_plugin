DECLARE PLUGIN "coq-mebi.mebi"

{
(* If we forget this line and include our own tactic definition using
  TACTIC EXTEND, as below, then we get the strange error message
  no implementation available for Tacentries, only when compiling
  theories/Loader.v *)
(* open Ltac_plugin *)

open Stdarg
(* open Pp *)
}

(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto0/src/g_tuto0.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto1/src/g_tuto1.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto2/src/g_tuto2.mlg *)

(* https://github.com/rocq-prover/rocq/blob/master/dev/doc/parsing.md *)

(* https://github.com/ybertot/plugin_tutorials/blob/master/tuto1/src/g_tuto1.mlg *)


VERNAC COMMAND EXTEND MeBiLTS CLASSIFIED AS QUERY

| ["MeBi" "SetBound" "Default" ] -> {Mebi_wrapper.run (Command.set_bound Command.default_bound)}
| ["MeBi" "SetBound" int(b)    ] -> {Mebi_wrapper.run (Command.set_bound b)}
| ["MeBi" "Check" "Bound"      ] -> {Mebi_wrapper.run (Command.get_bound ())}

| ["MeBi" "DumpToFile" "True" ] -> {Mebi_wrapper.run (Command.set_dump_to_file_flag true)}
| ["MeBi" "DumpToFile" "False"] -> {Mebi_wrapper.run (Command.set_dump_to_file_flag false)}
| ["MeBi" "Check" "DumpToFile"] -> {Mebi_wrapper.run (Command.get_dump_to_file_flag ())}

| ["MeBi" "ShowDebug" "True" ] -> {Mebi_wrapper.run (Command.set_show_debug_flag true)}
| ["MeBi" "ShowDebug" "False"] -> {Mebi_wrapper.run (Command.set_show_debug_flag false)}
| ["MeBi" "Check" "ShowDebug"] -> {Mebi_wrapper.run (Command.get_show_debug_flag ())}

| ["MeBi" "WeakMode" "True" ] -> {Mebi_wrapper.run (Command.set_weak_mode true)}
| ["MeBi" "WeakMode" "False"] -> {Mebi_wrapper.run (Command.set_weak_mode false)}
| ["MeBi" "Check" "WeakMode"] -> {Mebi_wrapper.run (Command.get_weak_mode ())}

| ["MeBi" "SetWeak" "Option" constr(x) ] -> { Mebi_wrapper.run (Command.set_weak_type (Command.Option x)) }
| ["MeBi" "SetWeak" constr(x) "Of" 
                          reference(y) ] -> { Mebi_wrapper.run (Command.set_weak_type (Command.Custom (x, y))) }
| ["MeBi" "Check" "Weak"] -> {Mebi_wrapper.run (Command.get_weak_type ())}


| ["MeBi" "LTS" constr(x) "Using" reference(r) ] -> 
  { Mebi_wrapper.run (Command.run (Command.MakeModel (Command.LTS, (x, r))) [])}
| ["MeBi" "LTS" constr(x) "Using" reference(r) reference_list(rs)] -> 
  { Mebi_wrapper.run (Command.run (Command.MakeModel (Command.LTS, (x, r))) rs)}

| ["MeBi" "FSM" constr(x) "Using" reference(r) ] -> 
  { Mebi_wrapper.run (Command.run (Command.MakeModel (Command.FSM, (x, r))) [])}
| ["MeBi" "FSM" constr(x) "Using" reference(r) reference_list(rs)] -> 
  { Mebi_wrapper.run (Command.run (Command.MakeModel (Command.FSM, (x, r))) rs)}

| ["MeBi" "Saturate" constr(x) "Using" reference(r) ] -> 
  { Mebi_wrapper.run (Command.run (Command.SaturateModel (x, r)) [])}
| ["MeBi" "Saturate" constr(x) "Using" reference(r) reference_list(rs)] -> 
  { Mebi_wrapper.run (Command.run (Command.SaturateModel (x, r)) rs)}

| ["MeBi" "Minimize" constr(x) "Using" reference(r) ] -> 
  { Mebi_wrapper.run (Command.run (Command.SaturateModel (x, r)) [])}
| ["MeBi" "Minimize" constr(x) "Using" reference(r) reference_list(rs)] -> 
  { Mebi_wrapper.run (Command.run (Command.SaturateModel (x, r)) rs)}

| ["MeBi" "Bisim" constr(x) "With" reference(a) "And" constr(y) "With" reference(b)] -> 
  { Mebi_wrapper.run (Command.run (Command.CheckBisimilarity ((x, a), (y, b))) [])}
| ["MeBi" "Bisim" constr(x) "With" reference(a) "And" constr(y) "With" reference(b) "Using" reference_list(rs)] -> 
  { Mebi_wrapper.run (Command.run (Command.CheckBisimilarity ((x, a), (y, b))) rs)}


END
