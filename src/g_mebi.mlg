DECLARE PLUGIN "coq-mebi.mebi"

{
(* If we forget this line and include our own tactic definition using
  TACTIC EXTEND, as below, then we get the strange error message
  no implementation available for Tacentries, only when compiling
  theories/Loader.v *)
(* open Ltac_plugin *)

open Stdarg
(* open Pp *)
}

(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto0/src/g_tuto0.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto1/src/g_tuto1.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto2/src/g_tuto2.mlg *)

(* https://github.com/rocq-prover/rocq/blob/master/dev/doc/parsing.md *)

(* https://github.com/ybertot/plugin_tutorials/blob/master/tuto1/src/g_tuto1.mlg *)


VERNAC COMMAND EXTEND MeBiLTS CLASSIFIED AS QUERY

| ["MeBi" "DumpToFile" "True"] -> {Mebi_wrapper.run (Command.set_dump_to_file_flag true)}
| ["MeBi" "DumpToFile" "False"] -> {Mebi_wrapper.run (Command.set_dump_to_file_flag false)}

| ["MeBi" "ShowDebug" "True"] -> {Mebi_wrapper.run (Command.set_show_debug_flag true)}
| ["MeBi" "ShowDebug" "False"] -> {Mebi_wrapper.run (Command.set_show_debug_flag false)}

| ["MeBi" "Check" constr(x) ] -> {Mebi_wrapper.run (Mebi_api.check x)}

| ["MeBi" "Run" constr(x) ] -> {Mebi_wrapper.run (Mebi_api.run x)}

(* | [ "MeBi" string(mode) string(model) "Of" constr(t) "Using" reference_list(r) ] -> 
  { match (
      match mode with 
        | "Check" -> Some (Vernac.Check ())
        | "Show" -> Some (Vernac.Show ())
        | "Dump" -> Some (Vernac.Dump None)
        | _ -> None
    ) with 
    | None -> Feedback.msg_notice (str "unrecognized mode: " ++ str mode)
    | Some mode -> (
      match model with 
        | "LTS" -> Vernac.LTS (((true, Command.default_bound, t), ), r)
        | _ -> None
    )


    Mebi_wrapper.run (Mebi_api.run x)
  } *)

| ["MeBi" "Check" "LTS" "Of" constr(x) "Using" reference_list(rs)] -> 
  { Feedback.msg_notice (Pp.str "TODO: \"MeBi Check LTS Of (x) Using (rs)\"") }
| ["MeBi" "Check" "FSM" "Of" constr(x) "Using" reference_list(rs)] -> 
  { Feedback.msg_notice (Pp.str "TODO: \"MeBi Check FSM Of (x) Using (rs)\"") }

| ["MeBi" "Check" "Bisim" "Of" constr(x) "With" reference(a) "And" "Of" constr(y) "With" reference(b) "Using" reference_list(rs)] -> 
  { Feedback.msg_notice (Pp.str "TODO: \"MeBi Check Bisim Of (x) With (a) And Of (y) With (b) Using (rs)\"") }

| ["MeBi" "Check" "LTS" "Bounded" int(b) "Of" constr(x) "Using" reference_list(rs)] -> 
  { Feedback.msg_notice (Pp.str "TODO: \"MeBi Check LTS Bounded (b) Of (x) Using (rs)\"") }
| ["MeBi" "Check" "FSM" "Bounded" int(b) "Of" constr(x) "Using" reference_list(rs)] -> 
  { Feedback.msg_notice (Pp.str "TODO: \"MeBi Check FSM Bounded (b) Of (x) Using (rs)\"") }

END
