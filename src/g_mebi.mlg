DECLARE PLUGIN "coq-mebi.mebi"

{

(*
(* If we forget this line and include our own tactic definition using
  TACTIC EXTEND, as below, then we get the strange error message
  no implementation available for Tacentries, only when compiling
  theories/Loader.v
*)
open Ltac_plugin
*)

open Stdarg

(* open Pp *)

}

(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto0/src/g_tuto0.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto1/src/g_tuto1.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto2/src/g_tuto2.mlg *)

(*
 * TODO: so far, classified as query. What it should do: read proposition, check
 * it has the corret type. Print proposition.
 *)
VERNAC COMMAND EXTEND MeBiLTS CLASSIFIED AS QUERY
  (***************************)
  (***************************)
  (***************************)
  | [ "MeBi" "LTS" reference(r) constr(t) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_lts
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=false;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          (Nametab.global r) t)) }
  (*** debug mode ****)
  | [ "MeBi" "LTS" "show_debug" reference(r) constr(t) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_lts
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=true;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          (Nametab.global r) t)) }
  (***************************)
  (***************************)
  (***************************)
  | [ "MeBi" "LTS2" reference(r) constr(t) reference(s) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_layered_lts
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=false;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          [(Nametab.global r); (Nametab.global s)] t )) }
  (*** debug mode ****)
  | [ "MeBi" "LTS2" "show_debug" reference(r) constr(t) reference(s) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_layered_lts
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=true;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          [(Nametab.global r); (Nametab.global s)] t )) }
  (***************************)
  (***************************)
  (***************************)
  | [ "MeBi" "Layered" "LTS" constr(t) "Using" reference_list(r) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_layered_lts
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=false;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          (List.fold_left (fun (acc: Names.GlobRef.t list ) (s:Libnames.qualid) -> List.append acc [Nametab.global s]) [] r) t )) }
  (*** debug mode ****)
  | [ "MeBi" "Layered" "LTS" "show_debug" constr(t) "Using" reference_list(r) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_layered_lts
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=true;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          (List.fold_left
            (fun (acc: Names.GlobRef.t list ) (s:Libnames.qualid) ->
              List.append acc [Nametab.global s]
            ) [] r)
          t
          )) }
  (***************************)
  (***************************)
  (***************************)
  | [ "MeBi" "FSM" reference(r) constr(t) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_lts_to_fsm
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=false;
              show_debug_output=false;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          (Nametab.global r) t)) }
  (*** debug mode ****)
  (* | [ "MeBi" "FSM" "show_debug" reference(r) constr(t) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_lts_to_fsm
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=true;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          (Nametab.global r) t)) }
  (***************************)
  (***************************)
  (***************************)
  | [ "MeBi" "FSM" "Merge" reference(r) constr(t) reference(r') constr(t') ] ->
    { (Mebi_monad.run
        (Command.cmd_merge_fsm_from_lts
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=false;
              show_debug_output=false;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
        ((Nametab.global r), t)
        ((Nametab.global r'), t'))) } *)
  (*** debug mode ****)
  | [ "MeBi" "FSM" "Merge" "show_debug" reference(r) constr(t) reference(r') constr(t') ] ->
    { (Mebi_monad.run
        (Command.cmd_merge_fsm_from_lts
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=true;
              show_warning_output=true };
            params
          )
        (* coq terms: *)
      ((Nametab.global r), t)
      ((Nametab.global r'), t'))) }
  (***************************)
  (***************************)
  (***************************)
  (* run bisim alg on two terms (first, builds fsm) *)
  | [ "MeBi" "Bisim" "KS90" reference(r) constr(t) reference(r') constr(t') ] ->
    { (Mebi_monad.run
        (Command.cmd_bisim_ks90_using_lts_to_fsm
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=false;
              show_debug_output=false;
              show_warning_output=true };
            params
          )
        (* coq terms: *)
      ((Nametab.global r), t)
      ((Nametab.global r'), t'))) }
  (*** debug mode ****)
  | [ "MeBi" "Bisim" "KS90" "show_debug" reference(r) constr(t) reference(r') constr(t') ] ->
    { (Mebi_monad.run
        (Command.cmd_bisim_ks90_using_lts_to_fsm
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=true;
              show_warning_output=true };
            params
          )
        (* coq terms: *)
      ((Nametab.global r), t)
      ((Nametab.global r'), t'))) }
  (***************************)
  (***************************)
  (***************************)
  (* run minimization alg on single term (first, builds fsm) *)
  | [ "MeBi" "Minim" "KS90" reference(r) constr(t) ] ->
    { (Mebi_monad.run
        (Command.cmd_minim_ks90_using_lts_to_fsm
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=false;
              show_debug_output=false;
              show_warning_output=true };
            params
          )
        (* coq terms: *)
      ((Nametab.global r), t))) }
  (*** debug mode ****)
  | [ "MeBi" "Minim" "KS90" "show_debug" reference(r) constr(t) ] ->
    { (Mebi_monad.run
        (Command.cmd_minim_ks90_using_lts_to_fsm
          ~params:(
            let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=true;
              show_warning_output=true };
            params
          )
        (* coq terms: *)
      ((Nametab.global r), t))) }
      (*  *)
      (* line 36: https://github.com/rocq-prover/rocq/blob/master/coqpp/coqpp_parse.mly *)
  | [ "AcceptTestInt" int(l) ] -> { () }
  | [ "AcceptTestInts" int_list(l) ] -> { () }
  | [ "AcceptTestRef" reference(l) ] -> { () }
  | [ "AcceptTestRefs" reference_list(l) ] -> { () }
  | [ "AcceptTestRefsConstrA" reference_list(l) constr(t) ] -> { () }
  | [ "AcceptTestRefsConstrB" constr(t) reference_list(l) ] -> { () }
  | [ "AcceptTestRefsConstrA2" reference_list(l) "On" constr(t) ] -> { () }
  | [ "AcceptTestRefsConstrB2" constr(t) "Using" reference_list(l) ] -> { () }
END
