DECLARE PLUGIN "coq-mebi.mebi"

{

(*
(* If we forget this line and include our own tactic definition using
  TACTIC EXTEND, as below, then we get the strange error message
  no implementation available for Tacentries, only when compiling
  theories/Loader.v
*)
open Ltac_plugin
*)

open Stdarg

(* open Pp *)

}

(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto0/src/g_tuto0.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto1/src/g_tuto1.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto2/src/g_tuto2.mlg *)

(*
 * TODO: so far, classified as query. What it should do: read proposition, check
 * it has the corret type. Print proposition.
 *)
VERNAC COMMAND EXTEND MeBiLTS CLASSIFIED AS QUERY
  (***************************)
  (**** Coq -> LTS  **********)
  (***************************)
  (* build lts for [t] using [r] (default bounds) *)
  | [ "MeBi" "Show" "LTS"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_lts
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "LTS"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_lts
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (* build lts for [t] using [r], within bound [i] *)
  | [ "MeBi" "Show" "LTS" "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_lts
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "LTS"
      "Of" constr(t) "Using" reference_list(r)
      "Within" "Bound" int(i) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_lts
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (***************************)
  (**** Coq -> LTS -> FSM ****)
  (***************************)
  (* build fsm from lts for [t] using [r] (default bounds) *)
  | [ "MeBi" "Show" "FSM"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_fsm
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "FSM"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_fsm
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (* build fsm from lts for [t] using [r], within bound [i] *)
  | [ "MeBi" "Show" "FSM"
      "Of" constr(t) "Using" reference_list(r)
      "Within" "Bound" int(i) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_fsm
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "FSM"
      "Of" constr(t) "Using" reference_list(r)
      "Within" "Bound" int(i) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_fsm
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (****************************************************)
  (**** Coq A -> LTS A -> FSM A -> Minim A ************)
  (****************************************************)
  (* build fsm from lts for [t] using [r] (default bounds), and run minum *)
  | [ "MeBi" "Show" "Minim"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_minim
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "Minim"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_minim
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (* build fsm from lts for [t] using [r], within bound [i], and run minum *)
  | [ "MeBi" "Show" "Minim"
      "Of" constr(t) "Using" reference_list(r)
      "Within" "Bound" int(i) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_minim
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "Minim"
      "Of" constr(t) "Using" reference_list(r)
      "Within" "Bound" int(i) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_minim
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (****************************************************)
  (**** Coq A B -> LTS A B -> FSM A B -> Merge A B ****)
  (****************************************************)
  (* build two fsms from two different lts and merge them *)
  | [ "MeBi" "Show" "FSM" "Merge"
      "Of" constr(tA) "Using" reference_list(rA)
      "With"
      "Of" constr(tB) "Using" reference_list(rB) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_merged_fsm
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        tA
        (Mebi_utils.ref_list_to_glob_list rA)
        tB
        (Mebi_utils.ref_list_to_glob_list rB)
      ) }
  | [ "MeBi" "Debug" "FSM" "Merge"
      "Of" constr(tA) "Using" reference_list(rA)
      "With"
      "Of" constr(tB) "Using" reference_list(rB) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_merged_fsm
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        tA
        (Mebi_utils.ref_list_to_glob_list rA)
        tB
        (Mebi_utils.ref_list_to_glob_list rB)
      ) }
  (* build two fsms from two different lts and merge them, within bound [i] *)
  | [ "MeBi" "Show" "FSM" "Merge"
      "Of" constr(tA) "Using" reference_list(rA)
      "With"
      "Of" constr(tB) "Using" reference_list(rB)
      "Within" "Bound" int(i) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_merged_fsm
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        tA
        (Mebi_utils.ref_list_to_glob_list rA)
        tB
        (Mebi_utils.ref_list_to_glob_list rB)
      ) }
  | [ "MeBi" "Debug" "FSM" "Merge"
      "Of" constr(tA) "Using" reference_list(rA)
      "With"
      "Of" constr(tB) "Using" reference_list(rB)
      "Within" "Bound" int(i) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_merged_fsm
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        tA
        (Mebi_utils.ref_list_to_glob_list rA)
        tB
        (Mebi_utils.ref_list_to_glob_list rB)
      ) }
  (****************************************************)
  (**** Coq A B -> LTS A B -> FSM A B -> Bisim A M ****)
  (****************************************************)
  (* check if two fsms built from lts are bisimiular *)
  | [ "MeBi" "Show" "Bisim"
      "Of" constr(tA) "Using" reference_list(rA)
      "With"
      "Of" constr(tB) "Using" reference_list(rB) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_bisim
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        tA
        (Mebi_utils.ref_list_to_glob_list rA)
        tB
        (Mebi_utils.ref_list_to_glob_list rB)
      ) }
  | [ "MeBi" "Debug" "Bisim"
      "Of" constr(tA) "Using" reference_list(rA)
      "With"
      "Of" constr(tB) "Using" reference_list(rB) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_bisim
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        tA
        (Mebi_utils.ref_list_to_glob_list rA)
        tB
        (Mebi_utils.ref_list_to_glob_list rB)
      ) }
  (* check if two fsms built from lts within bound [i] are bisimiular *)
  | [ "MeBi" "Show" "Bisim"
      "Of" constr(tA) "Using" reference_list(rA)
      "With"
      "Of" constr(tB) "Using" reference_list(rB)
      "Within" "Bound" int(i) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_bisim
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        tA
        (Mebi_utils.ref_list_to_glob_list rA)
        tB
        (Mebi_utils.ref_list_to_glob_list rB)
      ) }
  | [ "MeBi" "Debug" "Bisim"
      "Of" constr(tA) "Using" reference_list(rA)
      "With"
      "Of" constr(tB) "Using" reference_list(rB)
      "Within" "Bound" int(i) ] ->
    { Mebi_monad.run (
      Command.Vernac.show_bisim
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        tA
        (Mebi_utils.ref_list_to_glob_list rA)
        tB
        (Mebi_utils.ref_list_to_glob_list rB)
      ) }
END
