DECLARE PLUGIN "coq-mebi.mebi"

{
(* If we forget this line and include our own tactic definition using
  TACTIC EXTEND, as below, then we get the strange error message
  no implementation available for Tacentries, only when compiling
  theories/Loader.v *)
(* open Ltac_plugin *)

open Stdarg
(* open Pp *)
}

(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto0/src/g_tuto0.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto1/src/g_tuto1.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto2/src/g_tuto2.mlg *)

(* https://github.com/rocq-prover/rocq/blob/master/dev/doc/parsing.md *)

(* https://github.com/ybertot/plugin_tutorials/blob/master/tuto1/src/g_tuto1.mlg *)


VERNAC COMMAND EXTEND MeBiLTS CLASSIFIED AS QUERY

| ["MeBi" "Set"   "Bound" "Default"] -> {Mebi_wrapper.run (Command.set_bound Command.default_bound)}
| ["MeBi" "Set"   "Bound" int(b)   ] -> {Mebi_wrapper.run (Command.set_bound b)}
| ["MeBi" "Check" "Bound"          ] -> {Mebi_wrapper.run (Mebi_wrapper.return (Command.get_bound ()))}

| ["MeBi" "Set"   "DumpToFile" "True" ] -> {Mebi_wrapper.run (Command.set_dump_to_file_flag true)}
| ["MeBi" "Set"   "DumpToFile" "False"] -> {Mebi_wrapper.run (Command.set_dump_to_file_flag false)}
| ["MeBi" "Check" "DumpToFile"        ] -> {Mebi_wrapper.run (Mebi_wrapper.return (Command.get_dump_to_file_flag ()))}

| ["MeBi" "Set"   "ShowDebug" "True" ] -> {Mebi_wrapper.run (Command.set_show_debug_flag true)}
| ["MeBi" "Set"   "ShowDebug" "False"] -> {Mebi_wrapper.run (Command.set_show_debug_flag false)}
| ["MeBi" "Check" "ShowDebug"        ] -> {Mebi_wrapper.run (Mebi_wrapper.return (Command.get_show_debug_flag ()))}

| ["MeBi" "Set"   "ShowDetails" "True" ] -> {Mebi_wrapper.run (Command.set_show_details_flag true)}
| ["MeBi" "Set"   "ShowDetails" "False"] -> {Mebi_wrapper.run (Command.set_show_details_flag false)}
| ["MeBi" "Check" "ShowDetails"        ] -> {Mebi_wrapper.run (Mebi_wrapper.return (Command.get_show_details_flag ()))}

| ["MeBi" "Set"   "WeakMode" "True" ] -> {Mebi_wrapper.run (Command.set_weak_mode true)}
| ["MeBi" "Set"   "WeakMode" "False"] -> {Mebi_wrapper.run (Command.set_weak_mode false)}
| ["MeBi" "Check" "WeakMode"        ] -> {Mebi_wrapper.run (Mebi_wrapper.return (Command.get_weak_mode ()))}

| ["MeBi" "Set"   "Weak" "Option" constr(x)] -> {Mebi_wrapper.run (Command.set_weak_type (Command.Option x))}
| ["MeBi" "Set"   "Weak" constr(x) "Of" 
                               reference(y)] -> {Mebi_wrapper.run (Command.set_weak_type (Command.Custom (x, y)))}
| ["MeBi" "Check" "Weak"                   ] -> {Mebi_wrapper.run (Mebi_wrapper.return (Command.get_weak_type ()))}

| ["MeBi" "Check" "All"] -> {Mebi_wrapper.run (Command.check_all ())}

| ["MeBi" "LTS" constr(x) "Using" reference(r)] -> {Mebi_wrapper.run (Command.run (Command.MakeModel (Command.LTS, (x, r))) [])}
| ["MeBi" "LTS" constr(x) "Using" reference(r) 
                            reference_list(rs)] -> {Mebi_wrapper.run (Command.run (Command.MakeModel (Command.LTS, (x, r))) rs)}

| ["MeBi" "FSM" constr(x) "Using" reference(r)] -> {Mebi_wrapper.run (Command.run (Command.MakeModel (Command.FSM, (x, r))) [])}
| ["MeBi" "FSM" constr(x) "Using" reference(r) 
                            reference_list(rs)] -> {Mebi_wrapper.run (Command.run (Command.MakeModel (Command.FSM, (x, r))) rs)}

| ["MeBi" "Saturate" constr(x) "Using" reference(r)] -> {Mebi_wrapper.run (Command.run (Command.SaturateModel (x, r)) [])}
| ["MeBi" "Saturate" constr(x) "Using" reference(r) 
                                 reference_list(rs)] -> {Mebi_wrapper.run (Command.run (Command.SaturateModel (x, r)) rs)}

| ["MeBi" "Minimize" constr(x) "Using" reference(r)] -> {Mebi_wrapper.run (Command.run (Command.SaturateModel (x, r)) [])}
| ["MeBi" "Minimize" constr(x) "Using" reference(r) 
                                 reference_list(rs)] -> {Mebi_wrapper.run (Command.run (Command.SaturateModel (x, r)) rs)}

| ["MeBi" "Bisim" constr(x) "With" reference(a) 
            "And" constr(y) "With" reference(b)] -> {Mebi_wrapper.run (Command.run (Command.CheckBisimilarity ((x, a), (y, b))) [])}
| ["MeBi" "Bisim" constr(x) "With" reference(a) 
            "And" constr(y) "With" reference(b) 
                     "Using" reference_list(rs)] -> {Mebi_wrapper.run (Command.run (Command.CheckBisimilarity ((x, a), (y, b))) rs)}

| ["MeBi" "Help"] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Basic ())) [])}

| ["MeBi" "Help" "Set"              ] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Set Command.General)) [])}
| ["MeBi" "Help" "Set" "Bound"      ] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Set Command.Bound)) [])}
| ["MeBi" "Help" "Set" "DumpToFile" ] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Set Command.DumpToFile)) [])}
| ["MeBi" "Help" "Set" "ShowDebug"  ] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Set Command.ShowDebug)) [])}
| ["MeBi" "Help" "Set" "ShowDetails"] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Set Command.ShowDetails)) [])}
| ["MeBi" "Help" "Set" "WeakMode"   ] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Set Command.WeakMode)) [])}
| ["MeBi" "Help" "Set" "Weak"       ] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Set Command.Weak)) [])}

| ["MeBi" "Help" "Check"] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Check ())) [])}

| ["MeBi" "Help" "LTS"] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.LTS ())) [])}
| ["MeBi" "Help" "FSM"] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.FSM ())) [])}

| ["MeBi" "Help" "Saturate"] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Saturate ())) [])}
| ["MeBi" "Help" "Minimize"] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Minimize ())) [])}

| ["MeBi" "Help" "Bisim"] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Bisim ())) [])}

| ["MeBi" "Help" "Info"] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Info ())) [])}

| ["MeBi" ] -> {Mebi_wrapper.run (Command.run (Command.Help (Command.Unrecognized ())) [])}

| ["MeBi" "Info"] -> {Mebi_wrapper.run (Command.run (Command.Info ()) [])}
END
