DECLARE PLUGIN "coq-mebi.mebi"

{
(* If we forget this line and include our own tactic definition using
  TACTIC EXTEND, as below, then we get the strange error message
  no implementation available for Tacentries, only when compiling
  theories/Loader.v *)
(* open Ltac_plugin *)

open Stdarg
(* open Pp *)
}

(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto0/src/g_tuto0.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto1/src/g_tuto1.mlg *)
(* https://github.com/rocq-prover/rocq/blob/master/doc/plugin_tutorial/tuto2/src/g_tuto2.mlg *)

(* https://github.com/rocq-prover/rocq/blob/master/dev/doc/parsing.md *)

(*

  # Syntax of MeBi commands

  {C} ::= MeBi                            : syntax of commands {C}
          [ Check | Show |                : feedback/output mode
            Dump  | Dump <name> ]   
          [ {L} | {F} | {A} ]             : kind of command to run
                                              {L} => build LTS
                                              {F} => build FSM
                                              {A} => run algorithm
          Using <lts_list>                : list of lts/constructors (outermost-first)

  {L} ::= LTS                             : syntax of LTS model (term + lts)
          [ Is Bounded <num> |            : (optional) raise error if bound exceeded
            Bounded <num>    |            : (optional) upper-bound
          Of <term>                       : initial term

  {F} ::= FSM From {L}                    : build ocaml FSM from extracted LTS

  {A} ::= [ {B} | {M} | {G} ]             : kinds of algorithms to run
                                              {G} => Merge
                                              {B} => Bisimilarity
                                              {M} => Minimization

  {G} ::= Merge {L}                       : run merge algorithm, first initial term
          With <lts>                      : the primary lts layer of first lts
          And {L}                         : initial term of second lts
          With <lts>                      : primary lts layer for second lts

  {B} ::= [ Weak <constr> |  ]            : (optional) check weak bisimilarity, using constructor for silent transitions
          Bisim {L}                       : run bisimilarity algorithm, first initial term
          With <lts>                      : the primary lts layer of first lts
          And {L}                         : initial term of second lts
          With <lts>                      : primary lts layer for second lts

  {M} ::= Minim {L}                       : run minimization algorithm

  ---------------------------------------

  # Examples

  - [MeBi Show LTS Of p Using a b c.]
    Builds an lts of term [p] using coq-lts [a], [b] and [c]
    (using a default bound), and displays in feedback window.

  - [MeBi Check n LTS Of p Using a.]
    Does the same as the above, but nothing is printed, displayed or outputted.

  - [MeBi Show LTS Bounded 5 Of p Using a b c.]
    Builds an lts of term [p] using coq-lts [a], [b] and [c]
    until 5 states are reached, and displays in feedback window.

  - [MeBi Check n LTS Is Bounded 5 Of p Using a.]
    Does the same as the above, but nothing is printed, displayed or outputted,
    and if the lts is not complete within the bounds, then raises failure.

  - [MeBi Dump LTS Of p Using a b c.]
    Builds an lts of term [p] using coq-lts [a], [b] and [c]
    and then dumps to (json) file.

  - [MeBi Dump n LTS Of p Using a b c.]
    Builds an lts of term [p] using coq-lts [a], [b] and [c]
    and then dumps to (json) file with name [n].

  ## Running Algorithms

  - [MeBi Show Merge LTS Of n With a And LTS Is Bounded 5 Of m With b Using a b c.]
    Builds the lts of initial term [n] using [a] as the primary lts, and does 
    the same for [m] using [b]. (Both can utilise any of the other provided lts
    as other layers.) Then, converts both to fsm and then merges them.

  *)

VERNAC COMMAND EXTEND MeBiLTS CLASSIFIED AS QUERY

(******************************)
(** Build LTS from coq term ***)
(******************************)
| [ "MeBi" "Check" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (false, Command.default_bound, t), r))}

| [ "MeBi" "Check" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (false, i, t), r))}

| [ "MeBi" "Check" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.LTS (true, i, t), r))}

| [ "MeBi" "Show" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (false, Command.default_bound, t), r))}

| [ "MeBi" "Show" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (false, i, t), r))}

| [ "MeBi" "Show" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (true, i, t), r))}

| [ "MeBi" "Dump" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (false, Command.default_bound, t), r))}

| [ "MeBi" "Dump" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (false, i, t), r))}

| [ "MeBi" "Dump" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.LTS (true, i, t), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (false, Command.default_bound, t), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (false, i, t), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.LTS (true, i, t), r))}

(******************************)
(** Build FSM from coq term ***) (* same as the above but with [Vernac.FSM] *)
(******************************)
| [ "MeBi" "Check" "FSM" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (false, Command.default_bound, t), r))}

| [ "MeBi" "Check" "FSM" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (false, i, t), r))}

| [ "MeBi" "Check" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.FSM (true, i, t), r))}

| [ "MeBi" "Show" "FSM" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (false, Command.default_bound, t), r))}

| [ "MeBi" "Show" "FSM" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (false, i, t), r))}

| [ "MeBi" "Show" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.FSM (true, i, t), r))}

| [ "MeBi" "Dump" "FSM" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (false, Command.default_bound, t), r))}

| [ "MeBi" "Dump" "FSM" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (false, i, t), r))}

| [ "MeBi" "Dump" "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.FSM (true, i, t), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (false, Command.default_bound, t), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (false, i, t), r))}

| [ "MeBi" "Dump" string(n) "FSM" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.FSM (true, i, t), r))}

(******************************)
(** Run Minim Algorithm on ****)
(** FSM built from LTS ********)
(******************************)
| [ "MeBi" "Check" "Minim" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Minim (false, Command.default_bound, t), r))}

| [ "MeBi" "Check" "Minim" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Minim (false, i, t), r))}

| [ "MeBi" "Check" "Minim" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Minim (true, i, t), r))}

| [ "MeBi" "Show" "Minim" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.LTS (false, Command.default_bound, t), r))}

| [ "MeBi" "Show" "Minim" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Minim (false, i, t), r))}

| [ "MeBi" "Show" "Minim" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Minim (true, i, t), r))}

| [ "MeBi" "Dump" "Minim" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Minim (false, Command.default_bound, t), r))}

| [ "MeBi" "Dump" "Minim" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Minim (false, i, t), r))}

| [ "MeBi" "Dump" "Minim" "LTS" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Minim (true, i, t), r))}

| [ "MeBi" "Dump" string(n) "Minim" "LTS" "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Minim (false, Command.default_bound, t), r))}

| [ "MeBi" "Dump" string(n) "Minim" "LTS" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Minim (false, i, t), r))}

| [ "MeBi" "Dump" string(n) "LTS" "Minim" "Is" "Bounded" int(i) "Of" constr(t) "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Minim (true, i, t), r))}

(******************************)
(** Run Merge Algorithm on ****)
(** two FSMs constructed from *)
(** different initial terms ***)
(** and lts. ******************)
(******************************)

(* check *)
| [ "MeBi" "Check" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge (((false, i1, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((false, i2, t2), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge (((false, i1, t1), l1), ((false, i2, t2), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge (((true, i1, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((true, i2, t2), l2)), r))}

| [ "MeBi" "Check" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Merge (((true, i1, t1), l1), ((true, i2, t2), l2)), r))}

(* show *)
| [ "MeBi" "Show" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge (((false, i1, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((false, i2, t2), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge (((false, i1, t1), l1), ((false, i2, t2), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge (((true, i1, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((true, i2, t2), l2)), r))}

| [ "MeBi" "Show" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Merge (((true, i1, t1), l1), ((true, i2, t2), l2)), r))}

(* dump -- unnamed *)
| [ "MeBi" "Dump" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge (((false, i1, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((false, i2, t2), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge (((false, i1, t1), l1), ((false, i2, t2), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge (((true, i1, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((true, i2, t2), l2)), r))}

| [ "MeBi" "Dump" "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Merge (((true, i1, t1), l1), ((true, i2, t2), l2)), r))}

(* dump -- named *)
| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge (((false, i1, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((false, i2, t2), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge (((false, i1, t1), l1), ((false, i2, t2), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge (((true, i1, t1), l1), ((false, Command.default_bound, t2), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge (((false, Command.default_bound, t1), l1), ((true, i2, t2), l2)), r))}

| [ "MeBi" "Dump" string(n) "Merge" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Merge (((true, i1, t1), l1), ((true, i2, t2), l2)), r))}


(******************************)
(** Run Bisim Algorithm on ****)
(** two FSMs constructed from *)
(** different initial terms ***)
(** and lts. ******************)
(******************************)

(* strong -- check *)
| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, i1, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((false, i2, t2), l2), None)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, i1, t1), l1), None), (((false, i2, t2), l2), None)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((true, i1, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((true, i2, t2), l2), None)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((true, i1, t1), l1), None), (((true, i2, t2), l2), None)), r))}

(* strong -- show *)
| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, i1, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((false, i2, t2), l2), None)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, i1, t1), l1), None), (((false, i2, t2), l2), None)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((true, i1, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((true, i2, t2), l2), None)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((true, i1, t1), l1), None), (((true, i2, t2), l2), None)), r))}

(* strong -- dump -- unnamed *)
| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, i1, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((false, i2, t2), l2), None)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, i1, t1), l1), None), (((false, i2, t2), l2), None)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((true, i1, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((true, i2, t2), l2), None)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((true, i1, t1), l1), None), (((true, i2, t2), l2), None)), r))}

(* strong -- dump -- named *)
| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, i1, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((false, i2, t2), l2), None)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, i1, t1), l1), None), (((false, i2, t2), l2), None)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((true, i1, t1), l1), None), (((false, Command.default_bound, t2), l2), None)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), None), (((true, i2, t2), l2), None)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((true, i1, t1), l1), None), (((true, i2, t2), l2), None)), r))}

(* weak -- check *)
| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, i1, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((false, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                     "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, i1, t1), l1), Some w1), (((false, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                     "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((true, i1, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((true, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Check" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                     "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                     "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Check ()) (Vernac.Bisim ((((true, i1, t1), l1), Some w1), (((true, i2, t2), l2), Some w2)), r))}

(* weak -- show *)
| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, i1, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((false, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, i1, t1), l1), Some w1), (((false, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((true, i1, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((true, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Show" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Show ()) (Vernac.Bisim ((((true, i1, t1), l1), Some w1), (((true, i2, t2), l2), Some w2)), r))}

(* weak -- dump -- unnamed *)
| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, i1, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((false, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, i1, t1), l1), Some w1), (((false, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((true, i1, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((true, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                    "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                    "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump None) (Vernac.Bisim ((((true, i1, t1), l1), Some w1), (((true, i2, t2), l2), Some w2)), r))}

(* weak -- dump -- named *)
| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, i1, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((false, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                              "And" "LTS" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, i1, t1), l1), Some w1), (((false, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                              "And" "LTS" "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((true, i1, t1), l1), Some w1), (((false, Command.default_bound, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((false, Command.default_bound, t1), l1), Some w1), (((true, i2, t2), l2), Some w2)), r))}

| [ "MeBi" "Dump" string(n) "Bisim" "LTS" "Is" "Bounded" int(i1) "Of" constr(t1) "With" reference(l1) "Weak" reference(w1) 
                              "And" "LTS" "Is" "Bounded" int(i2) "Of" constr(t2) "With" reference(l2) "Weak" reference(w2) 
                              "Using" reference_list(r) ] ->
    {Mebi_wrapper.run (Command.vernac (Vernac.Dump (Some n)) (Vernac.Bisim ((((true, i1, t1), l1), Some w1), (((true, i2, t2), l2), Some w2)), r))}


END


(*


(*
 * TODO: so far, classified as query. What it should do: read proposition, check
 * it has the corret type. Print proposition.
 *)
VERNAC COMMAND EXTEND MeBiLTS CLASSIFIED AS QUERY
  (***************************)
  (**** Coq -> LTS  **********)
  (***************************)
  (* build lts for [t] using [r] (default bounds) *)
  | [ "MeBi" "Show" "LTS"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "LTS"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~name
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "LTS"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (* build lts for [t] using [r], within bound [i] *)
  | [ "MeBi" "Show" "LTS" "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "LTS" "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        ~name
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "LTS" "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (******************************)
  (**** Coq -> LTS (with equiv) *)
  (******************************)
  (* build lts for [t] using [r] (default bounds) *)
  | [ "MeBi" "Show" "LTS" reference(e)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        t
        (Mebi_utils.ref_list_to_glob_list r)
        ~equiv:(Nametab.global e)
        ) }
  | [ "MeBi" "Dump" string(name) "LTS" reference(e)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~name
        ~equiv:(Nametab.global e)
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "LTS" reference(e)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~equiv:(Nametab.global e)
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (* build lts for [t] using [r], within bound [i] *)
  | [ "MeBi" "Show" "LTS" reference(e) "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        ~equiv:(Nametab.global e)
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "LTS" reference(e) "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        ~name
        ~equiv:(Nametab.global e)
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "LTS" reference(e) "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.LTS.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        ~equiv:(Nametab.global e)
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (***************************)
  (**** Coq -> LTS -> FSM ****)
  (***************************)
  (* build fsm from lts for [t] using [r] (default bounds) *)
  | [ "MeBi" "Show" "FSM"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "FSM"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~name
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "FSM"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (* build fsm from lts for [t] using [r], within bound [i] *)
  | [ "MeBi" "Show" "FSM" "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "FSM" "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        ~name
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "FSM" "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (*************************************)
  (**** Coq -> LTS (with equiv) -> FSM *)
  (*************************************)
  (* build fsm from lts for [t] using [r] (default bounds) *)
  | [ "MeBi" "Show" "FSM" reference(e)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~equiv:(Nametab.global e)
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "FSM" reference(e)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~name
        ~equiv:(Nametab.global e)
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "FSM" reference(e)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~equiv:(Nametab.global e)
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (* build fsm from lts for [t] using [r], within bound [i] *)
  | [ "MeBi" "Show" "FSM" reference(e) "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        ~equiv:(Nametab.global e)
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "FSM" reference(e) "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        ~name
        ~equiv:(Nametab.global e)
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "FSM" reference(e) "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.FSM.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        ~equiv:(Nametab.global e)
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (****************************************************)
  (**** Coq A -> LTS A -> FSM A -> Minim A ************)
  (****************************************************)
  (* build fsm from lts for [t] using [r] (default bounds), and run minum *)
  | [ "MeBi" "Show" "Minim"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Minim.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "Minim"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Minim.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~name
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "Minim"
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Minim.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (* build fsm from lts for [t] using [r], within bound [i], and run minum *)
  | [ "MeBi" "Show" "Minim" "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Minim.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "Minim" "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Minim.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        ~name
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "Minim" "Bounded" int(i)
      "Of" constr(t) "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Minim.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        t
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (****************************************************)
  (**** Coq A B -> LTS A B -> FSM A B -> Merge A B ****)
  (****************************************************)
  (* build two fsms from two different lts and merge them *)
  | [ "MeBi" "Show" "FSM" "Merge"
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Merged.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "FSM" "Merge"
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Merged.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~name
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "FSM" "Merge"
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Merged.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (* build two fsms from two different lts and merge them, within bound [i] *)
  | [ "MeBi" "Show" "FSM" "Merge" "Bounded" int(i)
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Merged.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "FSM" "Merge" "Bounded" int(i)
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Merged.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        ~name
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "FSM" "Merge" "Bounded" int(i)
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Merged.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (****************************************************)
  (**** Coq A B -> LTS A B -> FSM A B -> Bisim A M ****)
  (****************************************************)
  (* check if two fsms built from lts are bisimiular *)
  | [ "MeBi" "Show" "Bisim"
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Bisim.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "Bisim"
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Bisim.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~name
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "Bisim"
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Bisim.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  (* check if two fsms built from lts within bound [i] are bisimiular *)
  | [ "MeBi" "Show" "Bisim" "Bounded" int(i)
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Bisim.show
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Dump" string(name) "Bisim" "Bounded" int(i)
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Bisim.dump
        ~params:(Utils.Params.Default.log ~mode:(Coq()) ())
        ~bound:i
        ~name
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
  | [ "MeBi" "Debug" "Bisim" "Bounded" int(i)
      "Of" constr(tA)
      "With" constr(tB)
      "Using" reference_list(r) ] ->
    { Mebi_wrapper.run (
      Vernac.Vernac.Bisim.show
        ~params:(
          let params = (Utils.Params.Default.log ~mode:(Coq()) ()) in
          params.options <-
          { output_enabled=true;
            show_normal_output=true;
            show_detailed_output=true;
            show_debug_output=true;
            show_warning_output=true };
          params
        )
        ~bound:i
        tA
        tB
        (Mebi_utils.ref_list_to_glob_list r)
      ) }
END
*)