DECLARE PLUGIN "coq-mebi.mebi"

{

(*
(* If we forget this line and include our own tactic definition using
  TACTIC EXTEND, as below, then we get the strange error message
  no implementation available for Tacentries, only when compiling
  theories/Loader.v
*)
open Ltac_plugin
*)

open Stdarg

(* open Pp *)

}

(*
 * TODO: so far, classified as query. What it should do: read proposition, check
 * it has the corret type. Print proposition.
 *)
VERNAC COMMAND EXTEND MeBiLTS CLASSIFIED AS QUERY
  (***************************)
  (***************************)
  (***************************)
  | [ "MeBi" "LTS" reference(r) constr(t) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_lts
          ~params:(
            let params = (Utils.default_logging_params ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=false;
              show_debug_output=false;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          (Nametab.global r) t)) }
  (*** debug mode ****)
  | [ "MeBi" "LTS" "show_debug" reference(r) constr(t) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_lts
          ~params:(
            let params = (Utils.default_logging_params ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=true;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          (Nametab.global r) t)) }
  (***************************)
  (***************************)
  (***************************)
  | [ "MeBi" "FSM" reference(r) constr(t) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_lts_to_fsm
          ~params:(
            let params = (Utils.default_logging_params ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=false;
              show_debug_output=false;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          (Nametab.global r) t)) }
  (*** debug mode ****)
  | [ "MeBi" "FSM" "show_debug" reference(r) constr(t) ] ->
    { (Mebi_monad.run
        (Command.cmd_bounded_lts_to_fsm
          ~params:(
            let params = (Utils.default_logging_params ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=true;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
          (Nametab.global r) t)) }
  (***************************)
  (***************************)
  (***************************)
  | [ "MeBi" "FSM" "Merge" reference(r) constr(t) reference(r') constr(t') ] ->
    { (Mebi_monad.run
        (Command.cmd_merge_fsm_from_lts
          ~params:(
            let params = (Utils.default_logging_params ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=false;
              show_debug_output=false;
              show_warning_output=true };
            params
          )
          (* coq terms: *)
        ((Nametab.global r), t)
        ((Nametab.global r'), t'))) }
  (*** debug mode ****)
  | [ "MeBi" "FSM" "Merge" "show_debug" reference(r) constr(t) reference(r') constr(t') ] ->
    { (Mebi_monad.run
        (Command.cmd_merge_fsm_from_lts
          ~params:(
            let params = (Utils.default_logging_params ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=true;
              show_warning_output=true };
            params
          )
        (* coq terms: *)
      ((Nametab.global r), t)
      ((Nametab.global r'), t'))) }
  (***************************)
  (***************************)
  (***************************)
  (* run bisim alg on two terms (first, builds fsm) *)
  | [ "MeBi" "Bisim" "KS90" reference(r) constr(t) reference(r') constr(t') ] ->
    { (Mebi_monad.run
        (Command.cmd_bisim_ks90_using_lts_to_fsm
          ~params:(
            let params = (Utils.default_logging_params ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=false;
              show_debug_output=false;
              show_warning_output=true };
            params
          )
        (* coq terms: *)
      ((Nametab.global r), t)
      ((Nametab.global r'), t'))) }
  (*** debug mode ****)
  | [ "MeBi" "Bisim" "KS90" "show_debug" reference(r) constr(t) reference(r') constr(t') ] ->
    { (Mebi_monad.run
        (Command.cmd_bisim_ks90_using_lts_to_fsm
          ~params:(
            let params = (Utils.default_logging_params ~mode:(Coq()) ()) in
            params.options <-
            { output_enabled=true;
              show_normal_output=true;
              show_detailed_output=true;
              show_debug_output=true;
              show_warning_output=true };
            params
          )
        (* coq terms: *)
      ((Nametab.global r), t)
      ((Nametab.global r'), t'))) }
END
